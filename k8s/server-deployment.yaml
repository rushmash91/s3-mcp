apiVersion: v1
kind: ServiceAccount
metadata:
  name: s3-mcp-server-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: s3-bucket-manager
rules:
- apiGroups: ["s3.services.k8s.aws"]
  resources: ["buckets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "apply"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: s3-mcp-server-binding
subjects:
- kind: ServiceAccount
  name: s3-mcp-server-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: s3-bucket-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: s3-mcp-server
  labels:
    app: s3-mcp-server
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: s3-mcp-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3-mcp-server
  labels:
    app: s3-mcp-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: s3-mcp-server
  template:
    metadata:
      labels:
        app: s3-mcp-server
    spec:
      serviceAccountName: s3-mcp-server-sa
      containers:
      - name: server
        image: your-registry/s3-mcp-server:latest
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        ports:
        - containerPort: 8080
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "8080"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: s3-mcp-server-ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: s3-mcp-server
            port:
              number: 8080 